#!/usr/bin/env python
import os.path, math
import scurve
from scurve import progress

# Generates .lxs files to render using http://www.luxrender.net/. After
# generating an .lxs file either run LuxConsole test.lxs or open up the Lux GUI
# tools and load the file from there. When rendering from the command line
# using LuxConsole the png file will be updated once a minute.

def drawmap(map, csource, name, size, divisions, quiet):
    if quiet:
        prog = progress.Dummy()
    else:
        prog = progress.Progress(len(map))

    step = len(csource)/float(len(map))
    out = open(name, "w")

    writeHeader(out, name, size)
    for i, p in enumerate(map):
        color = csource.point(int(i*step))
        writeBox(out, p, color, divisions)
        if not i%100:
            prog.tick(i)
    writeTrailer(out)

    out.close()


def writeHeader(out, filename, size):
    header = """
LookAt  0 0 6.5
        0 0 0
        0 1 0

Camera "orthographic"

Film "fleximage"
   "integer xresolution" [""" + str(size) + """] "integer yresolution" [""" + str(size) + """]
   "string tonemapkernel" ["reinhard"]
   "string filename" [\"""" + filename + """"]

PixelFilter "mitchell" "float xwidth" [2] "float ywidth" [2]

Sampler "metropolis"

SurfaceIntegrator "bidirectional"
   "integer eyedepth" [32]
   "integer lightdepth" [32]

WorldBegin

AttributeBegin
    LightGroup "sun"
    LightSource "sunsky"
   "float gain" [0.050000]
   "vector sundir" [0.2 0.2 1]

   "float relsize" [1.000000]
   "float turbidity" [2.000000]
AttributeEnd

MakeNamedMaterial "default"
   "string type" ["matte"]
   "color Kd" [0.8 0.8 0.8]

ObjectBegin "Box"
    Material "matte"
    Shape "trianglemesh" "integer indices" [
      0 3 2
      0 2 1
      2 3 4
      2 4 5
      3 0 7
      3 7 4
      0 1 6
      0 6 7
      1 2 5
      1 5 6
    ] "point P" [
       1  1  1
       1  0  1
       0  0  1
       0  1  1
       0  1  0
       0  0  0
       1  0  0
       1  1  0
    ]
ObjectEnd

AttributeBegin
    Transform [100     0    0    0
                 0   100    0    0
                 0     0    0.1  0
                 0     0    0    1]
    Material "matte"
    ObjectInstance "Box"
AttributeEnd
"""
    out.write(header)

def writeTrailer(out):

    out.write("\nWorldEnd")

def writeBox(out, p, color, size):
    template = """
AttributeBegin
    Transform [%g 0 0 0 0 %g 0 0 0 0 %g 0 %g %g 0 1]
    ObjectInstance "Box"
AttributeEnd
"""
    value = (color[0] + color[1] + color[2]) / float(3 * 256)
    unitWidth = 2.0 / size
    s = 1 / unitWidth
    out.write(template % (unitWidth, unitWidth, 1 - value, (p[0] / s) - 1, (p[1] / s) - 1))

def main():
    from optparse import OptionParser, OptionGroup
    parser = OptionParser(
                usage = "%prog [options] output.lxs",
                version="%prog 0.1",
            )
    parser.add_option(
        "-c", "--colorsource", action="store",
        type="str", dest="colorsource", default="hilbert"
    )
    parser.add_option(
        "-m", "--map", action="store",
        type="str", dest="map", default="hilbert"
    )
    parser.add_option(
        "-s", "--size", action="store",
        type="int", dest="size", default=128
    )
    parser.add_option(
        "-d", "--divisions", action="store",
        type="int", dest="divisions", default=32
    )
    parser.add_option(
        "-q", "--quiet", action="store_true",
        dest="quiet", default=False
    )
    options, args = parser.parse_args()
    if len(args) != 1:
        parser.error("Please specify output file.")

    csource = scurve.fromSize(options.colorsource, 3, 256**3)
    map = scurve.fromSize(options.map, 2, options.divisions**2)
    drawmap(map, csource, args[0], options.size, options.divisions, options.quiet)

main()

